在src下新建文件夹utils (utils全局公用的方法)
新建request.js文件
import axios from 'axios'
import { Message } from 'element-ui'
import { getToken } from './auth'
import store from '../store/index'

// 创建axios实例
const service = axios.create({
  baseURL: process.env.BASE_API, // api的base_url
  timeout: 5000 // 请求超时时间
})
// request拦截器
service.interceptors.request.use(config => {
  // 在请求前做的事
  config.headers['Content-Type'] = 'application/json;charset=UTF-8' // 请求体中的数据会以json字符串的形式发送到后端
  config.headers['withCredentials'] = true // withCredentials 表示跨域请求时是否需要使用凭证 默认为false
  if (getToken()) { // 如果存在token
    config.headers.Authorization = getToken() // 让每一个请求头携带token
  }
  return config
}, error => {
  // 请求失败
  Promise.reject(error)
})

// respone拦截器
service.interceptors.response.use(
	response => {
		const res = response.data
		// 对登录接口做特殊处理 登录接口没有返回code 和 message
    // 下面的判断根据具体情况判断
		if (res.code === 1 || res.username || res.size) {
			return res
		} else if (res.code !== 1) {
			if (response.config.url.indexOf('exportCaseReport') !== -1) {
				return res
			}
			if (res.message) {
				Message({
					message: res.message,
					type: 'error',
					duration: 5 * 1000
				})
			}
			if (res.code !== 401 && res.msg) {
				Message({
					message: res.msg,
					type: 'error',
					duration: 5 * 1000
				})
			} else if (res.code === 401) { // 401为登录超时
				Message({
					message: '登录超时或已过期',
					type: 'error',
					duration: 5 * 1000
				})
				// 退出登录
				window.store.dispatch('FedLogOut')
					.then(() => {
						location.reload() // 刷新页面
						// window.location.href = '/login'
					})
			}
		}
	},
	error => {
    // 下面的判断根据具体情况判断
		if (error.response) {
			Message({
				message: error.message,
				type: 'error',
				duration: 5 * 1000
			})
			if (error.response.data) {
				return Promise.reject(error.response.data)
			}
		} else if (error.message) {
			let message = error.message
			if (error.message.indexOf('timeout')) {
				message = '请求响应超时，请重试！'
			}
			Message({
				message: '请求响应超时',
				type: 'error',
				duration: 5 * 1000
			})
		} else {
			return Promise.reject(error)
		}
	}
)
export default service

在src下新建文件夹api存放接口文件
case.js
import request from '@/utils/request'
class Case {
	constructor() {
		this.baseUrl = 'case-server/'
	}
	// 获取用例列表数据 - 总库/项目库
	getCaseListData(params)
		return request({
			url: this.baseUrl + 'repository-case/project-info/',
			method: 'post',
			data: params // 如果method为get,传参为params: params
		})
	}
}
export default Case

在case.vue中调用
<script>
import Case from '@/api/case'
export default{
  method:{
    getData(){
      const params = {
        id: '...'
      }
      this.request.getCaseListData(params).then(res => {
        ...
      })
    }
  }
  create(){
    this.request = new Case()
  }
}
