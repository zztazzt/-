1.vue自动过滤用户输入的首尾空白字符
添加trim修饰符
<el-input v-model.trim="msg"></el-input>

2.表格时间排序
加入sortable属性
<el-table-column label="创建时间" prop="createTime" sortable></el-table-column>

3.修改对象的值 视图不刷新
使用set方法来赋值
this.$set(this.obj, 'name', '新的值') 或者 Vue.set(this.obj, 'name', '新的值')

4.父组件传给子组件的props 在子组件中是不能修改的 如果要修改 需要把props的值重新赋给一个新定义的数据

5.视图渲染完成后再执行的方法
this.$nextTick(()=>{
  this.show()
})

6.vue阻止事件冒泡事件
@click.stop

7.点击哪个按钮哪个按钮加样式
通过给按钮设置 :class="active:btnIndex===index" 
data: btnIndex:null,点击事件中把this.btnIndex=index

8.深复制
如果b赋值给a 然后对a进行改变 b也跟着变化 此时需要用深复制把b复制给a
a=JSON.parse(JSON.stringify(b)) 这样a再怎么改变 b也不会跟着变化了

9.input框绑定enter键 
@keyup.enter.native="方法名"

10.文字...隐藏 
加样式white-space: nowrap;text-overflow: ellipsis;overflow:hidden

11.模板字符串
用``将字符串包裹起来，用${}包裹变量
var String = a + ‘+’ + b + ‘=’ + (a+b) 
const String = `${a}+${b}=${a+b}`

12.路由传参
name和params配套，path和query配套
this.$router.push({
  name: 'confirm',
  params: { rowData: row.dataSource }
})

this.$router.push({
  path: '/personnel/caseReview/review-details/' + row.businessId + '/' + row.id
})
用params方法不会在URL路径中显示拼接
用query方法会显示拼接

12.版权
Copyright&nbsp;&copy;&nbsp;Wise Wrong - 2016 All rights reserved

13.初始化data里的数据
init () {
  Object.assign(this.$data, this.$options.data())
}

14.当一个 form 元素中只有一个输入框时，在该输入框中按下回车应提交该表单。
如果希望阻止这一默认行为，可以在 <el-form> 标签上添加 @submit.native.prevent

15.el-form按回车键触发确定方法
在<el-input>中绑定@keyup.enter.native="调用确定(提交)按钮的方法"

16.表格内容换行
表格内容中后台返回的数据有换行符，但显示没有换行，可设置以下样式换行
.el-table .cell {
  white-space: pre-line;
}
white-space的值：
normal 默认 空白会被浏览器忽略
pre 空白会被浏览器保留，其行为方式类似 HTML 中的<pre>标签
nowrap 文本不会换行，文本会在在同一行上继续，直到遇到 <br>标签为止
pre-wrap 保留空白符序列，但是正常地进行换行
pre-line 合并空白符序列，但是保留换行符
inherit 规定应该从父元素继承 white-space 属性的值

17.如果要watch对象中的某个key，可以用computed计算属性过渡
formData:{
  caseNo: '',
  caseName: ''
}
computed: {
  caseNo() {
    return this.formData.caseNo
  }
}
watch: {
  caseNo(newVal, oldVal) {
    console.log(newVal, oldVal)
  }
}

18.多选下拉框，需要选择全部数据之后再调用某一个方法时用visible-change方法，即下拉框隐藏时调用
<el-select v-model="data" multiple @visible-change="show($event)">
  <el-option
    v-for="item in options"
    :key="item.value"
    :label="item.label"
    :value="item.value">
  </el-option>
</el-select>
show(callback) { // callback为true(下拉框显示)或者false(下拉框隐藏)
  if(!callback) {
    // callback是false时执行这里的代码，即下拉框隐藏时执行
  }
}

19.后台返回字符串Boolean值时，前端拿到后转为Boolean值
后台返回数据 data = 'false' 或 data = 'true'
const flag = Boolean(data === 'true')
这样flag就是Boolean值了
不能直接const flag = Boolean(data) 这样flag一直都为true

20.弹窗中表单校验关闭后校验信息还存在问题
首先在el-dialog标签中加上:before-close="clear"
clear() {
  this.$refs[表单的ref名称].resetFields()
  this.dialogVisible = false
}
表单提交方法中也要调用clear()

21.rem和em
rem是根据根(html)的font-size变化，而em是根据父级的font-size变化
rem：相对于根元素html的font-size，假如html为font-size：12px，那么，在其当中的div设置为font-size：2rem,就是当中的div为24px
em：相对于父元素计算，假如某个p元素为font-size:12px,在它内部有个span标签，设置font-size：2em,那么，这时候的span字体大小为：12*2=24px
