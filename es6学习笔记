*圆括号的使用
如果在解构之前就定义了变量，这时候你再解构会出现问题。下面是错误的代码，编译会报错。
let foo;
{foo} ={foo:'zzt'};
console.log(foo);
要解决报错，使程序正常，我们这时候只要在解构的语句外边加一个圆括号就可以了。
let foo;
({foo} ={foo:'zzt'});
console.log(foo); //控制台输出zzt

*扩展运算符 和 rest运算符
rest运算符也是用三个点表示
function zzt(first, ...arg){ // 若写成(...arg, first)会报错
  for(let data of arg) {
    console.log(data)
  }
}
zzt(0,1,2,3)
// 1 // 2 // 3

*模板字符串
const a = 'zzt'
`hello,${a}`

*字符串查找
includes()
startsWith() 查找开头有没有
endsWith() 查找结尾有没有
'zzt'.repeat(3) // zztzztzzt 字符串复制

*数字的操作
判断是否是数字Number.isFinite()
console.log(Number.isFinite(1)) // true
console.log(Number.isFinite('zzt')) //false
console.log(Number.isFinite(NaN)) //false
console.log(Number.isFinite(undefined)) //false

NaN要用Number.isNaN(NaN)判断 // true

判断是否为整数Number.isInteger()
整数转换Number.parseInt()
浮点型转换Number.parseFloat()

整数的取值范围
let max = Math.pow(2, 53) - 1
console.log(max) //9007199254740991
最大安全整数
console.log(Number.MAX_SAFE_INTEGER) //9007199254740991
最小安全整数
console.log(Number.MIN_SAFE_INTEGER) //-9007199254740991
判断是否是安全整数
Number.isSafeInteger(max) // true

数组的方法
Array.from() 将含有length属性的对象转换为数组
Array.of() 把一堆文本或者变量转换成数组
console.log(Array.of(1,2,3)) // [1,2,3]

fill(填充的变量，开始填充的位置，填充到的位置!不包括该位置)实例方法
let arr = [0,1,2,3,4,5,6]
arr.fill('zzt',1,5)
console.log(arr) // [0,'zzt','zzt','zzt','zzt',5,6]

entries()实例方法
let arr = ['z','z','t']
for (let [index,val] of arr.entries()) {
 console.log(index+':'+val)
}
// 0:z // 1:z // 2:t

*获得需要传递的参数个数
function add(a,b=2){}
console.log(add.length) // 1 b已有默认值，所以不算是必选传递的参数

in
用来判断对象或者数组中是否存在某个值
let obj = { a:'z', b:'t' }
console.log('a' in obj) //true
let arr = [,,,]
console.log(0 in arr) // false
console.log(arr.length) // 3

Object.is() 对象比较
let obj1 = { name: 'zzt' }
let obj2 = { name: 'zzt' }
console.log(obj1.name === obj2.name) //true
console.log(Object.is(obj1.name, obj2.name)) //true
console.log(+0 === -0);  //true
console.log(NaN === NaN ); //false
console.log(Object.is(+0,-0)); //false
console.log(Object.is(NaN,NaN)); //true
===为同值相等，is()为严格相等

Object.assign()合并对象
let obj1 = { name: 'zzt'}
let obj2 = { a: '111' }
let obj3 = Object.assign(obj1, obj2)
console.log(obj3) // {name: "zzt", a: "111"}

Set()
let set = new Set(['z','z','t'])
console.log(set.size) // 2
console.log(set) // Set(2) {"z", "t"}
增
set.add('aaa')
console.log(set) // Set(3) {"z", "t", "aaa"}
删
set.delete('aaa')
console.log(set) // Set(2) {"z", "t"}
查
console.log(setArr.has('z'));//true
清除
set.clear();
console.log(set) // Set(0) {}

map数据结构
let json = {
  name: 'zzt',
  skill: 'web'
}
var map = new Map()
增
map.set('id', json)
console.log(map.size) // 1
console.log(map) // Map(1) {"id" => {name: 'zzt',skill: 'web'}}
取
console.log(map.get('id')) //{name: "zzt", skill: "web"}
删
map.delete('id') // Map(0) {}
查
console.log(map.has('id')) // true
清除
map.clear()
